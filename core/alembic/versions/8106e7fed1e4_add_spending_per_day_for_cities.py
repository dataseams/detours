"""Add spending_per_day for cities.

Revision ID: 8106e7fed1e4
Revises: 640b60ec66ed
Create Date: 2021-07-23 22:03:25.103823

"""
from datetime import time

import sqlalchemy as sa
from alembic import context, op
from sqlalchemy import orm
from sqlalchemy.dialects.postgresql import MONEY
from sqlalchemy.ext.declarative import declarative_base

# revision identifiers, used by Alembic.
revision = "8106e7fed1e4"
down_revision = "640b60ec66ed"
branch_labels = None
depends_on = None

Base = declarative_base()


class TableValues(dict):
    """Creates create attributes for initial table values for easy access."""

    def __init__(self, values: dict):
        for k, v in values.items():
            if hasattr(self, k):
                raise KeyError(f"{k} attribute cannot be created.")
            setattr(self, k, v)
            self.__setitem__(k, v)


class TimeOfDay(Base):
    """Define a time of day entity."""

    VALUES = TableValues(
        {
            "early_moring": (time(1, 0, 0), time(4, 59, 59)),
            "morning": (time(5, 0, 0), time(8, 59, 59)),
            "noon": (time(9, 0, 0), time(12, 59, 59)),
            "afternoon": (time(13, 0, 0), time(16, 59, 59)),
            "evening": (time(17, 0, 0), time(20, 59, 59)),
            "night": (time(21, 0, 0), time(12, 59, 59)),
        }
    )

    __tablename__ = "time_of_day"
    id = sa.Column(sa.Integer, primary_key=True)
    name = sa.Column(sa.String(20))
    start_time = sa.Column(sa.Time)
    end_time = sa.Column(sa.Time)


class City(Base):
    """Define a city entity."""

    VALUES = [
        {
            "code": "LA",
            "name": "Los Angeles",
            "state": "California",
            "state_abbr": "CA",
            "country": "USA",
            "latitude": 34.0619,
            "longitude": -118.2420,
            "spending_per_day": 190,
        },
        {
            "code": "SF",
            "name": "San Francisco",
            "state": "California",
            "state_abbr": "CA",
            "country": "USA",
            "latitude": 37.9296,
            "longitude": -122.4279,
            "spending_per_day": 365,
        },
        {
            "code": "SD",
            "name": "San Diego",
            "state": "California",
            "state_abbr": "CA",
            "country": "USA",
            "latitude": 32.7468,
            "longitude": -117.1612,
            "spending_per_day": 161,
        },
        {
            "code": "NYC",
            "name": "New York City",
            "state": "New York",
            "state_abbr": "NY",
            "country": "USA",
            "latitude": 41.8456,
            "longitude": -73.9249,
            "spending_per_day": 144,
        },
        {
            "code": "CHI",
            "name": "Chicago",
            "state": "Illinois",
            "state_abbr": "IL",
            "country": "USA",
            "latitude": 42.5780,
            "longitude": -87.7352,
            "spending_per_day": 221,
        },
    ]

    __tablename__ = "city"
    id = sa.Column(sa.Integer, primary_key=True)
    code = sa.Column(sa.String(3))
    name = sa.Column(sa.String(50))
    state = sa.Column(sa.String(20))
    state_abbr = sa.Column(sa.String(2))
    country = sa.Column(sa.String(50))
    latitude = sa.Column(sa.Numeric(precision=10, scale=6))
    longitude = sa.Column(sa.Numeric(precision=10, scale=6))
    spending_per_day = sa.Column(MONEY, default=176)


class ActivityType(Base):
    """Define an activity type entity."""

    # key = category, value = material icon code
    VALUES = TableValues(
        {
            "hotel": "hotel",
            "food": "restaurant",
            "tour": "directions_bike",
            "museum": "museum",
            "historic_building": "account_balance",
            "park": "nature_people",
            "beach": "beach_access",
            "theater": "theaters",
        }
    )

    __tablename__ = "activity_type"
    id = sa.Column(sa.Integer, primary_key=True)
    name = sa.Column(sa.String(50))
    material_icon = sa.Column(sa.String(50))


def upgrade():
    """Upgrade database."""
    schema_upgrades()
    if context.get_x_argument(as_dictionary=True).get("data", None):
        data_upgrades()


def downgrade():
    """Downgrade database."""
    if context.get_x_argument(as_dictionary=True).get("data", None):
        data_downgrades()
    schema_downgrades()


def schema_upgrades():
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.add_column(
        "city", sa.Column("spending_per_day", MONEY, nullable=True),
    )
    op.alter_column(
        table_name="trip_plan",
        column_name="spending_per_day",
        nullable=True,
        type_=MONEY,
    )
    # ### end Alembic commands ###


def schema_downgrades():
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_column("city", "spending_per_day")
    op.alter_column(
        table_name="trip_plan",
        column_name="spending_per_day",
        nullable=True,
        type_=sa.Integer,
        postgresql_using="spending_per_day::numeric::int",
    )
    # ### end Alembic commands ###


def data_upgrades():  # noqa: C901
    """Add any optional data upgrade migrations here."""
    bind = op.get_bind()
    session = orm.Session(bind=bind)

    time_of_day = []
    existing_time_of_day = session.query(TimeOfDay).all()
    for k, v in TimeOfDay.VALUES.items():
        time_of_day.append(TimeOfDay(name=k, start_time=v[0], end_time=v[1]))
    for item in time_of_day:
        if item.name not in [x.name for x in existing_time_of_day]:
            session.add(item)
    session.commit()

    activity_types = []
    existing_acitivity_types = session.query(ActivityType).all()
    for k, v in ActivityType.VALUES.items():
        activity_types.append(ActivityType(name=k, material_icon=v))
    for item in activity_types:
        if item.name not in [x.name for x in existing_acitivity_types]:
            session.add(item)
    session.commit()

    cities = []
    existing_cities = session.query(City).all()
    for item in City.VALUES:
        cities.append(City(**item))
    for item in cities:
        if item.code not in [x.code for x in existing_cities]:
            session.add(item)
    session.commit()

    # udpate spending per day for all cities
    city_spending = {x["code"]: x["spending_per_day"] for x in City.VALUES}
    for city in session.query(City).all():
        city.spending_per_day = city_spending[city.code]
    session.commit()


def data_downgrades():
    """Add any optional data downgrade migrations here."""
    pass
